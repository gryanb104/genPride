configfile: "config/config.yaml"
report: "report/workflow.rst"

from rules import documentation as doc
import pandas as pd

#SAMPS = (pd.read_csv("config/manifest.csv")).loc[:,'sample_id'].values 
SAMPS = ("cellular_subset","vesicle_subset_nanopore","vesicle_subset_illumina")
FWD_PATHS = (pd.read_csv("config/manifest.csv")).loc[:,'absolute_path_fwd'].values
MANIFEST = pd.read_csv("config/manifest.csv", index_col=0)

return_mkdoc = "logs/01-return_mkdoc_{sample}.out"
return_ass = "logs/03-return_assmb_{sample}.out"
return_coverage = "logs/08-return_coverage_{sample}.out"

samp_doc_dir = "results/01-documentation/"
samp_doc = "results/01-documentation/{sample}_documentation.txt"
ass_contigs_dir = "results/03-assembled_seqs/{sample}_assembly/"
ass_contigs = "results/03-assembled_seqs/{sample}_assembly/contigs.fasta"
coverage_outfile_dir = "results/08-coverage/"
coverage_outdir = "results/08-coverage/{sample}_coverage"
coverage_outfile = "results/08-coverage/{sample}_coverage/{sample}_coverage"

manifest = "config/manifest.csv"
confg = "/nobackup1/biller/gray/genPride/config/config.yaml"

rule all:
	input:
		#samp_doc = expand("results/01-documentation/{sample}_documentation.txt", sample="vesicle_subset_all"),
		#ass_contigs = expand("results/03-assembled_seqs/{sample}_assembly/contigs.fasta", sample=SAMPS)
		coverage_outall = expand("results/08-coverage/{sample}_coverage/{sample}_coverage", sample="vesicle_subset_all")

rule make_documentation:
	input:
		inp_fwd = lambda w: MANIFEST.at[f"{w.sample}", "absolute_path_fwd"],
		inp_rev = lambda w: MANIFEST.at[f"{w.sample}", "absolute_path_rev"],
		confg = confg
	output:
		samp_doc = samp_doc,
		return_mkdoc = return_mkdoc
	params:
		samp_doc_dir = samp_doc_dir,
		trimmed = lambda w: MANIFEST.at[f"{w.sample}", "trimmed"],
		paired = lambda w: MANIFEST.at[f"{w.sample}", "paired"],
		assembly_method = lambda w: MANIFEST.at[f"{w.sample}", "assembly"],
		gene_pred = lambda w: MANIFEST.at[f"{w.sample}", "gene_prediction"],
		clustering_meth = lambda w: MANIFEST.at[f"{w.sample}", "clustering"],
		tax_class = lambda w: MANIFEST.at[f"{w.sample}", "taxonomic_classifier"],
		coverage_meth = lambda w: MANIFEST.at[f"{w.sample}", "coverage_method"],
		coverage_ref_type = lambda w: MANIFEST.at[f"{w.sample}", "coverage_reference_type"],
		samp_or_path = lambda w: MANIFEST.at[f"{w.sample}", "coverage_reference_sample_or_path"]
	shell:
		'''
		python3 -m workflow.scripts.make_documentation_cofg_reset \
		{input.confg} "COVERAGE INPUTS"
		python3 -m workflow.scripts.make_documentation \
		{input.inp_fwd} \
		{input.confg} \
		{input.inp_rev} \
		{wildcards.sample} \
		{params.trimmed} \
		{params.samp_doc_dir} \
		{params.samp_or_path} \
		{params.paired} \
		{params.assembly_method} \
		{params.gene_pred} \
		{params.clustering_meth} \
		{params.tax_class} \
		{params.coverage_meth} \
		{params.coverage_ref_type} \
		{output.samp_doc} > {output.return_mkdoc}
		
		'''

rule assemble_data:
	input: 
		inp_fwd = lambda w: MANIFEST.at[f"{w.sample}", "absolute_path_fwd"]
	output:
		ass_contigs = ass_contigs
	params:
		ass_contigs_dir = ass_contigs_dir,
		ass_thresh = config["assemble_thresh"],
		threads = config["threads"],
		spm = config["spades_py_memory"],
		spades_path = config["spades_path"],	
		ass_meth = lambda w: MANIFEST.at[f"{w.sample}", "assembly"],
		paired = lambda w: MANIFEST.at[f"{w.sample}", "paired"],
		return_ass = return_ass,
		inp_rev = lambda w: MANIFEST.at[f"{w.sample}", "absolute_path_rev"],
		min_contig_length = config["min_contig_length"]
	shell:
		'''
		bash workflow/scripts/assemble_meat.sh \
		{params.ass_contigs_dir} \
		{params.ass_thresh} \
		{params.threads} \
		{params.spm} \
		{params.spades_path} \
		{output.ass_contigs} \
		{wildcards.sample} \
		"{params.ass_meth}" \
		{input.inp_fwd} \
		{params.inp_rev} \
		{params.paired} \
		{params.min_contig_length} > {params.return_ass}
		
		'''

rule RM1:
	input:
		ass_contigs = "results/03-assembled_seqs/{sample}_assembly/contigs.fasta"
	output:
		RM1_rep = "logs/03-return_RM1_rep_{sample}.txt"
	params:
		rm1_files = config["rm1_files"],
		assembly_dir = "results/03-assembled_seqs"
	shell:
		'''
		bash workflow/scripts/RM1.sh \
		{params.rm1_files} \
		{wildcards.sample} \
		{params.assembly_dir} > {output.RM1_rep}

		'''

rule RM2:
        input:
                clustered_seqs = "results/05-clustered_seqs/{sample}_cluster/{sample}_all_seqs.fasta"
        output:
                RM2_rep = "logs/05b-return_RM2_rep_{sample}.txt"
        params:
                rm2_files = config["rm2_files"]
        shell:
                '''
                bash workflow/scripts/RM2.sh \
                {params.rm2_files} \
		{wildcards.sample} > {output.RM2_rep}

                '''

rule find_orfs:
	input:
		ass_contigs = "results/03-assembled_seqs/{sample}_assembly/contigs.fasta",
		RM1_rep = "logs/03-return_RM1_rep_{sample}.txt",
		manifest = "config/manifest.csv",
		samp_doc = "results/01-documentation/{sample}_documentation.txt"
	output:
		slurm_orf = "logs/04-return_orf_{sample}.out",
		prot_seqs = "results/04-protein_seqs/{sample}_prot_seqs/protein_translations.faa"
	params:
		prod_path = config["prod_path"],
	shell:
		'''
		bash workflow/scripts/find_orfs.sh \
		{input.ass_contigs} \
		{input.manifest} \
		{wildcards.sample} \
		{input.samp_doc} > {output.slurm_orf}
		
		'''
	
rule cluster:
	input:
		prot_seqs = "results/04-protein_seqs/{sample}_prot_seqs/protein_translations.faa"
	output:
		slurm_clust = "logs/05-return_cluster_{sample}.out",
		clustered_seqs = "results/05-clustered_seqs/{sample}_cluster/{sample}_all_seqs.fasta"
	params:
		nuc_id = config["cluster_nuc_id"],
		overlap = config["cluster_overlap"],
		cluster_db = config["cluster_db"]
	shell:
		'''
		bash workflow/scripts/cluster_gen.sh \
		{input.prot_seqs} \
		{params.nuc_id} \
		{params.overlap} \
		{params.cluster_db} \
		{wildcards.sample} > {output.slurm_clust}
		
		'''	

rule quast:
	input:
		ass_contigs = "results/03-assembled_seqs/{sample}_assembly/contigs.fasta",
		manifest = "config/manifest.csv"
	output:
		slurm_quast = "logs/03b_return_quast_{sample}.out"
	params:
		quast_path = config["quast_path"]
	shell:
                '''
                bash workflow/scripts/quasting.sh \
		{params.quast_path} \
		{input.ass_contigs} \
		{wildcards.sample} > {output.slurm_quast}
		
		'''

rule gorg_class:
	input:
		ass_contigs = "results/03-assembled_seqs/{sample}_assembly/contigs.fasta"
	output:
		slurm_gorg = "logs/06-return_gorg_{sample}.out",
		gorg_results = "results/06-gorg_classification/{sample}_classification/annotations/contigs_annotated.txt"
	params:
		nextflow_path = config["nextflow_path"],
		gorg_path = config["gorg_path"]
	shell:
		'''
		bash workflow/scripts/gorg_classifier.sh \
		{params.nextflow_path} \
		{input.ass_contigs} \
		{params.gorg_path} \
		{wildcards.sample} > {output.slurm_gorg}
				
		'''

rule gorg_krona:
	input:
		gorg_results = "results/06-gorg_classification/{sample}_classification/annotations/contigs_annotated.txt"
	output:
		krona_file = "results/07-gorg_krona/{sample}_krona/gorg_contann.krona",
		slurm_krona = "logs/07-return_krona_{sample}.out"
	params:
		nodes_dmp = config["krona_nodes_dmp"],
		names_dmp = config["krona_names_dmp"]
	shell:
		'''
		bash workflow/scripts/get_krona_from_gorg.sh \
		{params.nodes_dmp} \
		{params.names_dmp} \
		{input.gorg_results} \
		{output.krona_file} \
		{wildcards.sample} > {output.slurm_krona}

		'''

rule report_final:
	input:
		samp_doc = "results/01-documentation/{sample}_documentation.txt",
		slurm_ass = "logs/03-return_assmb_{sample}.out",
		ass_contigs = "results/03-assembled_seqs/{sample}_assembly/contigs.fasta",
		slurm_orf = "logs/04-return_orf_{sample}.out",
		slurm_clust = "logs/05-return_cluster_{sample}.out",
		slurm_quast = "logs/03b_return_quast_{sample}.out",
		slurm_gorg = "logs/06-return_gorg_{sample}.out",
		slurm_krona = "logs/07-return_krona_{sample}.out"
	output:
		report_final = "workflow/report/report_final_{sample}.txt"
	params:
		name = config["run_name"],
	shell:
		'''
		bash workflow/scripts/assemble_report.sh \
		{input.samp_doc} \
		{params.name} \
		{input.slurm_ass} \
		{input.ass_contigs} \
		{input.slurm_orf} \
		{input.slurm_clust} \
		{input.slurm_quast} \
		{input.slurm_gorg} \
		{input.slurm_krona} \
		{wildcards.sample} > {output.report_final}
		
		'''

rule coverage:
	input:
		covr_inp = lambda w: config[f"{w.sample}_covr_inp"],
		inp_fwd = lambda w: MANIFEST.at[f"{w.sample}", "absolute_path_fwd"]
	output:
		coverage_outfile = coverage_outfile
	params:
		inp_rev = lambda w: MANIFEST.at[f"{w.sample}", "absolute_path_rev"],
		paired = lambda w: MANIFEST.at[f"{w.sample}", "paired"],
		coverage_method = lambda w: MANIFEST.at[f"{w.sample}", "coverage_method"],
		return_coverage = return_coverage,
		coverage_outdir = coverage_outdir
	threads:
		1
	shell:					
		'''
		bash workflow/scripts/coverage.sh \
		{params.paired} \
		{input.covr_inp} \
		{wildcards.sample} \
		{params.coverage_outdir} \
		{params.coverage_method} \
		{input.inp_fwd} \
		{params.inp_rev} \
		{output.coverage_outfile} > {params.return_coverage}

		'''
