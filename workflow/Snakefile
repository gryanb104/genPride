configfile: "config/config.yaml"

report: "report/workflow.rst"

rule all:
	input:
		report_final_cell = "workflow/report/report_final_cellular_subset.txt",
		report_final_ves = "workflow/report/report_final_vesicle_subset.txt"		
			
rule make_documentation:
	input:
		manifest = "config/manifest.csv"
	output:
		return_mkdoc = "logs/01-return_mkdoc.out"
	shell:
		'''
		python3 -m workflow.scripts.make_documentation \
		{input.manifest} > {output.return_mkdoc}
				
		'''

rule assemble_data:
	input: 
		samp_doc = "results/01-documentation/{sample}_documentation.txt",
		return_mkdoc = "logs/01-return_mkdoc.out",
		manifest = "config/manifest.csv"
	output:
		slurm_ass = "logs/02-return_assmb_{sample}.out",
		ass_contigs = "results/02-assembled_seqs/{sample}_assembly/contigs.fasta"
	params:
		ass_thresh = config["assemble_thresh"],
		threads = config["threads"],
		spm = config["spades_py_memory"],
		spades_path = config["spades_path"]	
	shell:
		'''
		bash workflow/scripts/assemble_meat.sh \
		{input.samp_doc} \
		{input.manifest} \
		{params.ass_thresh} \
		{params.threads} \
		{params.spm} \
		{params.spades_path} > {output.slurm_ass}
		
		'''

rule RM1:
	input:
		ass_contigs = "results/02-assembled_seqs/{sample}_assembly/contigs.fasta"
	output:
		RM1_rep = "logs/03-return_RM1_rep_{sample}.txt"
	params:
		rm1_files = config["rm1_files"]
	shell:
		'''
		bash workflow/scripts/RM1.sh \
		{params.rm1_files} \
		{wildcards.sample} > {output.RM1_rep}

		'''

rule RM2:
        input:
                clustered_seqs = "results/05-clustered_seqs/{sample}_cluster/{sample}_all_seqs.fasta"
        output:
                RM2_rep = "logs/05b-return_RM2_rep_{sample}.txt"
        params:
                rm2_files = config["rm2_files"]
        shell:
                '''
                bash workflow/scripts/RM2.sh \
                {params.rm2_files} \
		{wildcards.sample} > {output.RM2_rep}

                '''

rule find_orfs:
	input:
		ass_contigs = "results/02-assembled_seqs/{sample}_assembly/contigs.fasta",
		RM1_rep = "logs/03-return_RM1_rep_{sample}.txt",
		manifest = "config/manifest.csv",
		samp_doc = "results/01-documentation/{sample}_documentation.txt"
	output:
		slurm_orf = "logs/04-return_orf_{sample}.out",
		prot_seqs = "results/04-protein_seqs/{sample}_prot_seqs/protein_translations.faa"
	params:
		prod_path = config["prod_path"],
		prod_meth = config["prodigal_meth"]
	shell:
		'''
		bash workflow/scripts/find_orfs.sh \
		{input.ass_contigs} \
		{params.prod_path} \
		{input.manifest} \
		{wildcards.sample} \
		{input.samp_doc} > {output.slurm_orf}
		
		'''
	
rule cluster:
	input:
		prot_seqs = "results/04-protein_seqs/{sample}_prot_seqs/protein_translations.faa"
	output:
		slurm_clust = "logs/05-return_cluster_{sample}.out",
		clustered_seqs = "results/05-clustered_seqs/{sample}_cluster/{sample}_all_seqs.fasta"
	params:
		mmseq_meth = config["mmseq_cluster_method"],
		nuc_id = config["cluster_nuc_id"],
		overlap = config["cluster_overlap"],
		cluster_db = config["cluster_db"]
	shell:
		'''
		bash workflow/scripts/cluster_gen.sh \
		{input.prot_seqs} \
		{params.mmseq_meth} \
		{params.nuc_id} \
		{params.overlap} \
		{params.cluster_db} \
		{wildcards.sample} > {output.slurm_clust}
		
		'''	

rule quast:
	input:
		ass_contigs = "results/02-assembled_seqs/{sample}_assembly/contigs.fasta",
		manifest = "config/manifest.csv"
	output:
		slurm_quast = "logs/03b_return_quast_{sample}.out"
	params:
		quast_path = config["quast_path"]
	shell:
                '''
                bash workflow/scripts/quasting.sh \
		{params.quast_path} \
		{input.ass_contigs} \
		{wildcards.sample} > {output.slurm_quast}
		
		'''

rule gorg_class:
	input:
		ass_contigs = "results/02-assembled_seqs/{sample}_assembly/contigs.fasta"
	output:
		slurm_gorg = "logs/06-return_gorg_{sample}.out",
		gorg_results = "results/06-gorg_classification/{sample}_classification/annotations/contigs_annotated.txt"
	params:
		nextflow_path = config["nextflow_path"],
		gorg_path = config["gorg_path"]
	shell:
		'''
		bash workflow/scripts/gorg_classifier.sh \
		{params.nextflow_path} \
		{input.ass_contigs} \
		{params.gorg_path} \
		{wildcards.sample} > {output.slurm_gorg}
				
		'''

rule gorg_krona:
	input:
		gorg_results = "results/06-gorg_classification/{sample}_classification/annotations/contigs_annotated.txt"
	output:
		krona_file = "results/07-gorg_krona/{sample}_krona/gorg_contann.krona",
		slurm_krona = "logs/07-return_krona_{sample}.out"
	params:
		nodes_dmp = config["krona_nodes_dmp"],
		names_dmp = config["krona_names_dmp"]
	shell:
		'''
		bash workflow/scripts/get_krona_from_gorg.sh \
		{params.nodes_dmp} \
		{params.names_dmp} \
		{input.gorg_results} \
		{output.krona_file} \
		{wildcards.sample} > {output.slurm_krona}

		'''

rule report_final:
	input:
		samp_doc = "results/01-documentation/{sample}_documentation.txt",
		slurm_ass = "logs/02-return_assmb_{sample}.out",
		ass_contigs = "results/02-assembled_seqs/{sample}_assembly/contigs.fasta",
		slurm_orf = "logs/04-return_orf_{sample}.out",
		slurm_clust = "logs/05-return_cluster_{sample}.out",
		slurm_quast = "logs/03b_return_quast_{sample}.out",
		slurm_gorg = "logs/06-return_gorg_{sample}.out",
		slurm_krona = "logs/07-return_krona_{sample}.out"
	output:
		report_final = "workflow/report/report_final_{sample}.txt"
	params:
		name = config["run_name"],
	shell:
		'''
		bash workflow/scripts/assemble_report.sh \
		{input.samp_doc} \
		{params.name} \
		{input.slurm_ass} \
		{input.ass_contigs} \
		{input.slurm_orf} \
		{input.slurm_clust} \
		{input.slurm_quast} \
		{input.slurm_gorg} \
		{input.slurm_krona} \
		{wildcards.sample} > {output.report_final}
		
		'''

rule coverage:
	input:
		cover_seqs = config["coverage_of_what"]
	output:
		coverage_slurm = "results/slurm_coverage.out"
	shell:					
		'''
		bash workflow/scripts/coverage.sh \
		{input.cover_seqs} > {output.coverage_slurm}

		'''
