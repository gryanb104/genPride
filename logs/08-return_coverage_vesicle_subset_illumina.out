__________________________________________________

COVERAGE REPORT FOR SAMPLE vesicle_subset_illumina

INPUTS:
  paired: YES
  sample: vesicle_subset_illumina
  output directory: results/08-coverage/vesicle_subset_illumina_coverage
  coverage method: bowtie2:::
  forward reads: /nobackup1/biller/gray/data_GP/vesicle_subset_fwd_trimmed_paired.fastq.gz
  reverse reads: /nobackup1/biller/gray/data_GP/vesicle_subset_rev_trimmed_paired.fastq.gz

METHODS: 
  METHOD ONE: bowtie2
  METHOD TWO: 
  METHOD THREE: 
  METHOD FOUR: 

COVERAGE LOG:
Settings:
  Output files: "results/08-coverage/vesicle_subset_illumina_coverage/ref_index_for_vesicle_subset_illumina.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  results/03-assembled_seqs/cellular_subset_assembly/contigs.fasta
Reading reference sizes
  Time reading reference sizes: 00:00:01
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 12270644
Using parameters --bmax 9202983 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 9202983 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:01
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 7.0118e+06 (target: 9202982)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 7
  Reserving size (9202983) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 7077734 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:01
Returning block of 7077735 for bucket 1
Getting block 2 of 7
  Reserving size (9202983) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 6442621 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:01
Returning block of 6442622 for bucket 2
Getting block 3 of 7
  Reserving size (9202983) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 4733740 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:01
Returning block of 4733741 for bucket 3
Getting block 4 of 7
  Reserving size (9202983) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 7843459 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:01
Returning block of 7843460 for bucket 4
Getting block 5 of 7
  Reserving size (9202983) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 6538154 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:01
Returning block of 6538155 for bucket 5
Getting block 6 of 7
  Reserving size (9202983) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 8813900 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:01
Returning block of 8813901 for bucket 6
Getting block 7 of 7
  Reserving size (9202983) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 7632962 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:02
Returning block of 7632963 for bucket 7
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 15890745
fchr[G]: 24341106
fchr[T]: 32722153
fchr[$]: 49082576
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 28333142 bytes to primary EBWT file: results/08-coverage/vesicle_subset_illumina_coverage/ref_index_for_vesicle_subset_illumina.1.bt2.tmp
Wrote 12270652 bytes to secondary EBWT file: results/08-coverage/vesicle_subset_illumina_coverage/ref_index_for_vesicle_subset_illumina.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 49082576
    bwtLen: 49082577
    sz: 12270644
    bwtSz: 12270645
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 3067662
    offsSz: 12270648
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 255639
    numLines: 255639
    ebwtTotLen: 16360896
    ebwtTotSz: 16360896
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:00:22
Reading reference sizes
  Time reading reference sizes: 00:00:01
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 12270644
Using parameters --bmax 9202983 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 9202983 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:01
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 7; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 0; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 1; iterating...
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 7.0118e+06 (target: 9202982)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 7
  Reserving size (9202983) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 8475266 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:01
Returning block of 8475267 for bucket 1
Getting block 2 of 7
  Reserving size (9202983) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 6399237 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:01
Returning block of 6399238 for bucket 2
Getting block 3 of 7
  Reserving size (9202983) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 8020536 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:02
Returning block of 8020537 for bucket 3
Getting block 4 of 7
  Reserving size (9202983) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 4232672 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:01
Returning block of 4232673 for bucket 4
Getting block 5 of 7
  Reserving size (9202983) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 6499935 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:01
Returning block of 6499936 for bucket 5
Getting block 6 of 7
  Reserving size (9202983) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 8342098 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:01
Returning block of 8342099 for bucket 6
Getting block 7 of 7
  Reserving size (9202983) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 7112826 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:01
Returning block of 7112827 for bucket 7
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 15890745
fchr[G]: 24341106
fchr[T]: 32722153
fchr[$]: 49082576
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 28333142 bytes to primary EBWT file: results/08-coverage/vesicle_subset_illumina_coverage/ref_index_for_vesicle_subset_illumina.rev.1.bt2.tmp
Wrote 12270652 bytes to secondary EBWT file: results/08-coverage/vesicle_subset_illumina_coverage/ref_index_for_vesicle_subset_illumina.rev.2.bt2.tmp
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 49082576
    bwtLen: 49082577
    sz: 12270644
    bwtSz: 12270645
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 3067662
    offsSz: 12270648
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 255639
    numLines: 255639
    ebwtTotLen: 16360896
    ebwtTotSz: 16360896
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:00:27

__________________________________________________
